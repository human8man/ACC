#pragma once

#include "Character/CCharacter.h"

class CPlayer;

//==================================================
//		エネミークラス.
//==================================================
class CEnemy
	: public CCharacter
{
public:
	CEnemy();
	virtual ~CEnemy();

	virtual void Update() override;
	virtual void Draw( D3DXMATRIX& View, D3DXMATRIX& Proj, LIGHT& Light ) override;


	// 移動量の取得.
	const D3DXVECTOR3& GetMoveVec() { return m_SumVec; }
	// 移動量の追加.
	void AddVec(D3DXVECTOR3 vec) { m_vPosition += vec; }
	void JumpPowerDec() { if (m_JumpPower > 0) { m_JumpPower -= m_Gravity; } }

	// 当たり判定処理(プレイヤー、床、柱).
	void Collision(std::unique_ptr<CPlayer>& egg, MeshCollider floor, MeshCollider cylinder);

private:
	// GJKクラス.
	std::unique_ptr<CGJK> m_pGJK;

	float m_TurnSpeed;	 // 回転速度.
	float m_MoveSpeed;	 // 移動速度.
	float m_CamRevision; // カメラ座標の補正値.

	D3DXVECTOR3 m_SumVec;// 合計のベクトル量.
};